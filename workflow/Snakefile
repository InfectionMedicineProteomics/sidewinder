#!/usr/bin/env python3
"""Based on the TX-MS web-app implementation Cheetah-MS.
"""

__author__ = 'Joel StrÃ¶baek'
__email__ = 'joel.strobaek@gmail.com'


# TODO:
# - Remove ms2 parameter hard coding!
#       - Set optional click input params with defaults
# - Look into adding logs for all the rules
#       - Diverting STDOUT/STDERR to log files
# - Set temp files
#       - dock_tmp.pdb / lig_tmp.pdb
#       - pdb_A/B.pdb
# - Add some subfolders to the results dir
#       - supp_files: all_xls.txt, seq_A/B.txt, detected_spectra.txt,
#                     model_A/B.pdb


from glob import glob
from pathlib import Path

from snakemake.utils import min_version


min_version("6.0")  # Min version for using modules.

configfile: "config/user_config.yml"


# Convert config paths from string to Path objects.
config_paths = ['output_dir', 'targets_dir', 'binders_dir', 'ms2_file']
config = {k: (v if k not in config_paths else Path(v).resolve()) for k, v in config.items()}

OUTDIR = config['output_dir']

TARGETS_LIST, = glob_wildcards(f'{config["targets_dir"]}/{{target}}.pdb')

BINDERS_LIST, = glob_wildcards(f'{config["binders_dir"]}/{{binder}}.pdb')

MGF_STEM = config["ms2_file"].stem

BLOCK_FV = True if bool(config['block_antibody_Fv_FR']) else False

MSCONVERT_CMD = (f'cp {{input.ms2}} {{output.mgf}}'
                 if (config['ms2_file'].suffix.lower() in '.mgf')
                 else f'mono {{params.thermoRawFileParser}} \
                        -i={{input.ms2}} \
                        -o={{params.outdir}} \
                        -f=0')


rule all:
    input:
        model_output = expand(f'{{outdir}}/{{target}}/{{binder}}/{{files}}',
                              outdir=OUTDIR,
                              target=TARGETS_LIST,
                              binder=BINDERS_LIST,
                              files=['best_model.pdb', 'best_model_xls.txt'])

rule pdb_handling:
    input:
        PDB_a = ancient(f'{config["targets_dir"]}/{{target}}.pdb'),
        PDB_b = ancient(f'{config["binders_dir"]}/{{binder}}.pdb')
    output:
        PDB = f'{{outdir}}/{{target}}/{{binder}}/complex_AB.pdb',
        seq_a = f'{{outdir}}/{{target}}/{{binder}}/seq_A.txt',
        seq_b = f'{{outdir}}/{{target}}/{{binder}}/seq_B.txt',
        mod_a = f'{{outdir}}/{{target}}/{{binder}}/model_A.pdb',
        mod_b = f'{{outdir}}/{{target}}/{{binder}}/model_B.pdb'
    params:
        pdb_handling = 'workflow/scripts/utils/pdb_handling.py',
        outdir = f'{{outdir}}/{{target}}/{{binder}}'
    conda:
        'envs/biopython_env.yml'
    shell:
        "python3 {params.pdb_handling} "
        "--pdb1 {input.PDB_a} "
        "--pdb2 {input.PDB_b} "
        "--output_dir {params.outdir}"

if BLOCK_FV:
    # TODO: Save process to SQLite DB and make output temporary.

    rule block_pdb:
        input:
            mc_pdb = rules.pdb_handling.input.PDB_a,
            sc_pdb = rules.pdb_handling.output.mod_a
        output:
            mod_a = (f'{{outdir}}/{{target}}/{{binder}}/'
                     f'model_A_blocked.pdb')  # Make temporary later.
        params:
            fv_blocking = 'workflow/scripts/mdock-block_pdb.py',
            outdir = f'{{outdir}}/{{target}}/{{binder}}'
        conda:
            'envs/biopython_env.yml'
        shell:
            "python3 {params.fv_blocking} "
            "--multi_chain_pdb {input.mc_pdb} "
            "--single_chain_pdb {input.sc_pdb} "
            "--output_dir {params.outdir}"

rule seq2xl:
    input:
        seq_a = rules.pdb_handling.output.seq_a,
        seq_b = rules.pdb_handling.output.seq_b
    output:
        f'{{outdir}}/{{target}}/{{binder}}/all_xls.txt'
    params:
        seq2xl = 'workflow/scripts/utils/cheetah/seq2xl.py',
        outdir = f'{{outdir}}/{{target}}/{{binder}}'
    conda:
        'envs/biopython_env.yml'
    shell:
        "python3 {params.seq2xl} "
        "--seq_file1 {input.seq_a} "
        "--seq_file2 {input.seq_b} "
        "--output_dir {params.outdir}"

rule megadock:
    input:
        mod_a = (rules.block_pdb.output.mod_a
                 if BLOCK_FV else rules.pdb_handling.output.mod_a),
        mod_b = rules.pdb_handling.output.mod_b
    output:
        f'{{outdir}}/{{target}}/{{binder}}/model_A-model_B.out'
    params:
        megadock = '/usr/local/megadock/megadock-4.1.1/megadock',
        predictions = 3600,  # Default=2000.
        mod_a = f'/data/{{target}}/{{binder}}/model_A.pdb',
        mod_b = f'/data/{{target}}/{{binder}}/model_B.pdb',
        output = f'/data/{{target}}/{{binder}}/model_A-model_B.out',
        log = f'/data/{{target}}/{{binder}}/dock.log'
    container:
        '/srv/data1/home/jo0348st/containers/megadock010.sif'
    threads:
        round(workflow.cores * 0.85)
    shell:
        "{params.megadock} "
        "-R {params.mod_a} "
        "-L {params.mod_b} "
        "-o {params.output} "
        "-N {params.predictions} "
        "> {params.log}"

rule msconvert:
    # TODO:
    #   - Sort proper thermoRawFileParser inclusion
    input:
        ms2 = (config['ms2_file'])
    output:
        mgf = f'{{outdir}}/ms2_convert/{MGF_STEM}.mgf'
    params:
        outdir = f'{{outdir}}/ms2_convert',
        thermoRawFileParser = config['thermoRawFileParser']
    conda:
        'envs/mono_env.yml'
    shell:
        MSCONVERT_CMD  # Adjust shell command based on file suffix:
                       #    - if not '.mgf': convert
                       #    - if '.mgf': copy existing file to outdir

rule ms2:
    input:
        mgf = ancient(rules.msconvert.output.mgf),
        xls = ancient(rules.seq2xl.output)
    output:
        sql = f'{{outdir}}/{{target}}/{{binder}}/ms2_results.sql',
        img_dir = directory(f'{{outdir}}/{{target}}/{{binder}}/top_spectra'),
        top_xls = f'{{outdir}}/{{target}}/{{binder}}/top_xls.txt',
        mgf_filt = f'{{outdir}}/{{target}}/{{binder}}/{MGF_STEM}_filtered.mgf'
    params:
        ms2_script = 'workflow/scripts/utils/cheetah/ms2.py',
        outdir = f'{{outdir}}/{{target}}/{{binder}}'
    conda:
        'envs/pyteomics_env.yml'
    shell:
        "python3 {params.ms2_script} "
        "--mgf_file {input.mgf} "
        "--xl_file {input.xls} "
        "--output_dir {params.outdir}"

rule modeling:
    # TODO:
    #   - Deal with no-hit-scenarios
    #   - Save euclidean distances to file
    #       - Include aa-numbering and xyz-coord anchors
    #
    input:
        PDB = rules.pdb_handling.output.PDB,
        top_xls = rules.ms2.output.top_xls,
        dock_file = rules.megadock.output
    output:
        top_model = f'{{outdir}}/{{target}}/{{binder}}/best_model.pdb',
        top_xls = f'{{outdir}}/{{target}}/{{binder}}/best_model_xls.txt',
        scores = f'{{outdir}}/{{target}}/{{binder}}/lr_models/scores.csv'
    params:
        cut_off = config['distance_cut_off'],
        n_top_f = config['num_of_top_filters'],
        n_docks = 3600,  # Default=1000.
        modeling_script = 'workflow/scripts/hamed_model.py',
        outdir = f'{{outdir}}/{{target}}/{{binder}}'
    conda:
        'envs/biopython_env.yml'
    threads:
        round(workflow.cores * 0.85)
    shell:
        "python3 {params.modeling_script} "
        "--complex_pdb {input.PDB} "
        "--output_dir {params.outdir} "
        "--top_xls_file {input.top_xls} "
        "--dock_file {input.dock_file} "
        "--n_models {params.n_docks} "
        "--n_filters {params.n_top_f} "
        "--cut_off {params.cut_off}"

# rule visualization:
